import os
import pygame
from PIL import Image
from pygame.examples.music_drop_fade import play_file
from pygame.locals import *

# Define colors
BLACK = pygame.Color('black')
WHITE = pygame.Color('white')
LIGHT_GRAY = pygame.Color('lightgray')

# Set the screen dimensions
h = 640
w = 480
Hh = h // 2
Hw = w // 2

# Global variable for current car
current_song_index = 0
# Define songs
songs = [
    "68. Rainbow Road.mp3",
    "Magical Sound Shower.mp3",
    "28. Coconut Mall.mp3",
    "85. N64 Sherbet Land.mp3",
    "1-109. Bowser's Castle_.mp3"
]
current_car = [
    "car1.png",
    "car2.png",
    "car1.png",
    "car1.png",
    "car1.png"
]
global buttons_visible, music_screen, car_screen, music_playing

def load_image(path, is_car=False):
    """Load and preprocess images."""
    try:
        image = pygame.image.load(path).convert_alpha() if is_car else pygame.image.load(path).convert()
        return image
    except Exception as e:
        print(f"Error loading image {path}: {e}")
        return None


def play_music(song_index):
    """Play the specified song based on the index."""
    pygame.mixer.music.load(songs[song_index])
    pygame.mixer.music.play(-1)  # Play the music indefinitely


def main():
    global current_car, current_song_index, music_playing, mouse_pos, back_button
    pygame.init()
    current_song_index = -1
    current_car_index = -1
    # Initialize mixer for sound
    pygame.mixer.init()

    # Set up the display
    screen = pygame.display.set_mode((w, h))
    pygame.display.set_caption("Image Display")

    # Load images
    r_tree = load_image("tree.png", True)
    l_tree = pygame.transform.flip(r_tree, True, False) if r_tree else None

    # Scale trees
    tree_width = 40
    if r_tree:
        tree_height = int(r_tree.get_height() * (tree_width / r_tree.get_width()))
        r_tree = pygame.transform.scale(r_tree, (tree_width, tree_height))
        l_tree = pygame.transform.scale(l_tree, (tree_width, tree_height)) if l_tree else None

    # Load car image
    car = load_image("car1.png", is_car=True)  # Using car1.png as the placeholder

    # Ensure the car image is correctly sized for subsurface
    if car:
        car_width, car_height = car.get_size()
        if car_height >= 41:
            car = car.subsurface(0, 0, min(car_width, 80), min(car_height, 41))

    # Strip ICC profile using PIL
    image_path = "nolines.png"
    try:
        pil_image = Image.open(image_path)
        pil_image.save(image_path)  # Save to strip ICC profile
    except Exception as e:
        print(f"Error loading image with PIL: {e}")
        pygame.quit()
        return

    # Load the image using Pygame after PIL has stripped the ICC profile
    image_surface = load_image(image_path)

    # Scale background image to fit the window
    if image_surface:
        image_surface = pygame.transform.scale(image_surface, (w, h))

    # Button dimensions
    button_width = 150
    button_height = 50
    button_start_y = 100

    # Game loop variables
    game_running = True
    game_started = False
    music_screen = False
    car_screen = False
    show_music_box = False
    buttons_visible = False
    music_playing = False  # Track if music is currently playing

    # Delay for back button and main menu buttons
    back_button_delay = 1000  # Delay for back button in milliseconds
    button_delay = 2000  # Delay for main menu buttons to appear again
    back_button_visible_time = 0  # Time when back button becomes visible
    main_buttons_visible_time = 0  # Time when start, music, and cars buttons become visible again

    # Define button rectangles
    button1 = pygame.Rect(0, 0, button_width, button_height)
    button2 = pygame.Rect(0, 0, button_width, button_height)

    while game_running:
        # Get the current time to check for button delays
        current_time = pygame.time.get_ticks()
        # Event processing
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = event.pos

                # Handle back button click
                if buttons_visible and event.button == 1:
                    if music_screen and back_button.collidepoint(mouse_pos):
                        buttons_visible = False
                        music_screen = False
                        if music_playing:
                            pygame.mixer.music.stop()  # Stop music when returning to the main menu
                            music_playing = False  # Reset screens and UI
                    elif car_screen and back_button.collidepoint(mouse_pos):
                        buttons_visible = False
                        car_screen = False
                        if music_playing:
                            pygame.mixer.music.stop()  # Stop music when returning to the main menu
                            music_playing = False  # Reset screens and UI

                # Handle button1 and button2 click (only register single press)
                if car_screen and buttons_visible:
                    if current_car_index < 0:
                        current_car_index = 0
                    if button1.collidepoint(mouse_pos):
                        current_car_index = (current_car_index - 1) % len(current_car)
                        load_image(current_car[current_car_index], True)
                        main_buttons_visible_time = current_time + button_delay  # Delay for main buttons to become visible again
                    elif button2.collidepoint(mouse_pos):
                        current_car_index = (current_car_index + 1) % len(current_car)
                        load_image(current_car[current_car_index], True)
                        main_buttons_visible_time = current_time + button_delay  # Delay for main buttons to become visible again

                if music_screen and buttons_visible:
                    if current_song_index < 0:
                        current_song_index = 0
                    if button1.collidepoint(mouse_pos):
                        current_song_index = (current_song_index - 1) % len(songs)
                        play_music(current_song_index)  # Play new song when switching
                        main_buttons_visible_time = current_time + button_delay  # Delay for main buttons to become visible again
                    elif button2.collidepoint(mouse_pos):
                        current_song_index = (current_song_index + 1) % len(songs)
                        play_music(current_song_index)  # Play new song when switching
                        main_buttons_visible_time = current_time + button_delay  # Delay for main buttons to become visible again
                # Check for main menu button clicks
                if not music_screen and not car_screen:
                    start_button = pygame.Rect(Hw - button_width // 2, button_start_y, button_width, button_height)
                    music_button = pygame.Rect(Hw - button_width // 2, button_start_y + 60, button_width, button_height)
                    cars_button = pygame.Rect(Hw - button_width // 2, button_start_y + 120, button_width, button_height)

                    if start_button.collidepoint(mouse_pos):
                        game_started = True
                        car_position = (Hw - car.get_width() // 2, h - 150)  # Center car at the bottom
                        if not music_playing:
                            play_music(current_song_index)  # Play music only when starting the game
                            music_playing = True
                    elif music_button.collidepoint(mouse_pos):
                        music_screen = True
                        show_music_box = True
                        buttons_visible = True
                        back_button_visible_time = current_time + back_button_delay  # Set delay for back button
                        play_music(current_song_index)  # Play the current song when entering the music screen
                        music_playing = True
                    elif cars_button.collidepoint(mouse_pos):
                        car_screen = True
                        buttons_visible = True
                        back_button_visible_time = current_time + back_button_delay  # Set delay for back button

        # Clear the screen
        screen.fill(BLACK)

        # Draw the background
        if image_surface:
            screen.blit(image_surface, (0, 0))

        if not game_started:
            if not music_screen and not car_screen:
                # Main menu buttons with a delay for visibility
                if current_time >= main_buttons_visible_time:
                    start_button = pygame.Rect(Hw - button_width // 2, button_start_y, button_width, button_height)
                    music_button = pygame.Rect(Hw - button_width // 2, button_start_y + 60, button_width, button_height)
                    cars_button = pygame.Rect(Hw - button_width // 2, button_start_y + 120, button_width, button_height)

                    # Draw buttons
                    pygame.draw.rect(screen, LIGHT_GRAY, start_button)
                    pygame.draw.rect(screen, LIGHT_GRAY, music_button)
                    pygame.draw.rect(screen, LIGHT_GRAY, cars_button)

                    # Add text to buttons
                    font = pygame.font.Font(None, 36)
                    start_text = font.render("Start", True, BLACK)
                    music_text = font.render("Music", True, BLACK)
                    cars_text = font.render("Cars", True, BLACK)

                    screen.blit(start_text, (start_button.x + 10, start_button.y + 10))
                    screen.blit(music_text, (music_button.x + 10, music_button.y + 10))
                    screen.blit(cars_text, (cars_button.x + 10, cars_button.y + 10))

                # Show the back button if we are in music or car screen
                if buttons_visible:
                    back_button = pygame.Rect(Hw - button_width // 2, h - 70, button_width, button_height)
                    pygame.draw.rect(screen, LIGHT_GRAY, back_button)
                    back_text = font.render("Back", True, BLACK)
                    screen.blit(back_text, (back_button.x + 10, back_button.y + 10))

            elif music_screen:
                # Music screen
                if current_time >= back_button_visible_time:
                    back_button = pygame.Rect(5, 10, button_width, button_height)
                    pygame.draw.rect(screen, LIGHT_GRAY, back_button)

                    back_text = font.render("Back", True, BLACK)
                    screen.blit(back_text, (back_button.x + 10, back_button.y + 10))
                if show_music_box:
                    # Show music selection UI
                    pygame.draw.rect(screen, BLACK, (Hw - 200, Hh - 100, 400, 45))  # Black box for song names
                    font = pygame.font.Font(None, 36)
                    song_text = font.render(songs[current_song_index], True, WHITE)
                    screen.blit(song_text, (Hw - 190, Hh - 90))  # Display current song name

                    button1 = pygame.Rect(Hw - button_width // 2, button_start_y, button_width, button_height)
                    button2 = pygame.Rect(Hw + button_width // 2, button_start_y, button_width, button_height)
                    pygame.draw.rect(screen, LIGHT_GRAY, button1)
                    pygame.draw.rect(screen, LIGHT_GRAY, button2)

                    # Add text to buttons
                    prev_song_text = font.render("<--", True, BLACK)
                    next_song_text = font.render("           -->", True, BLACK)
                    screen.blit(prev_song_text, (button1.x + 10, button1.y + 10))
                    screen.blit(next_song_text, (button2.x + 10, button2.y + 10))

            elif car_screen:
                # Car screen
                screen.fill(BLACK)  # Set screen to black for car selection
                if current_time >= back_button_visible_time:
                    back_button = pygame.Rect(5, 10, button_width, button_height)
                    pygame.draw.rect(screen, LIGHT_GRAY, back_button)
                    back_text = font.render("Back", True, BLACK)
                    screen.blit(back_text, (back_button.x + 10, back_button.y + 10))
                button1 = pygame.Rect(Hw - button_width // 2, button_start_y, button_width, button_height)
                button2 = pygame.Rect(Hw - button_width // 2, button_start_y + 60, button_width, button_height)
                pygame.draw.rect(screen, LIGHT_GRAY, button1)
                pygame.draw.rect(screen, LIGHT_GRAY, button2)

                # Add text to buttons
                prev_car_text = font.render("Prev Car", True, BLACK)
                next_car_text = font.render("Next Car", True, BLACK)
                screen.blit(prev_car_text, (button1.x + 10, button1.y + 10))
                screen.blit(next_car_text, (button2.x + 10, button2.y + 10))

                # Draw current car
                current_car_image = load_image(current_car[current_car_index], True)  # Load the selected car image
                if current_car_image:
                    current_car_image = pygame.transform.scale(current_car_image, (160 /1.5, 82 / 1.5))  # Scale it
                    screen.blit(current_car_image,
                    (Hw - current_car_image.get_width() // 2, h - 150))  # Center car at the bottom
        # Update the display
        pygame.display.flip()
        if current_song_index < 0:
            pygame.mixer.music.stop()
pygame.quit()


if __name__ == "__main__":
    main()
